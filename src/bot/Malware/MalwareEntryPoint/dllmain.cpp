#include <QApplication>
#include <QPushButton>
#include <Windows.h>
#include "dllmain.h"

/**
 * @brief The thread started by the DLL injection in order to start Qt
 * environment.
 */
void WINAPI qtThread()
{
    // Indicate where the Qt plugins are located
    QApplication::addLibraryPath("C:\\Qt");

    int argc = 0;
    app = new QApplication(argc, NULL);
    button = new QPushButton();
    QObject::connect(button, SIGNAL(clicked(bool)), app, SLOT(aboutQt()));
    button->setText("About Qt");
    button->show();
    app->exec();
}

/**
 * @brief The entry point of the DLL that starts the malware code.
 * @param hinstDLL handle to DLL module
 * @param fdwReason reason for calling function
 * @param lpReserved reserved
 * @return Returns TRUE if the injection succeed, otherwise FALSE.
 * @see https://msdn.microsoft.com/en-us/library/windows/desktop/ms682596(v=vs.85).aspx
 */
BOOL WINAPI DllMain(
    HINSTANCE hinstDLL,
    DWORD fdwReason,
    LPVOID lpReserved )
{
    // Perform actions based on the reason for calling.
    switch( fdwReason )
    {
        case DLL_PROCESS_ATTACH:
            // Initialize once for each new process.
            // Disable the call of the event for threads attach/detach
            DisableThreadLibraryCalls(hinstDLL);

            // Start a new thread to handle Qt code
            if ( CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)qtThread, NULL, 0, NULL) == NULL ) {
                return FALSE;
            }

            break;

        case DLL_THREAD_ATTACH:
            // Do thread-specific initialization.
            break;

        case DLL_THREAD_DETACH:
            // Do thread-specific cleanup.
            break;

        case DLL_PROCESS_DETACH:
            // Perform any necessary cleanup.
            break;
    }

    return TRUE;  // Successful DLL_PROCESS_ATTACH.
}
