#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <memory>

#include <QMainWindow>
#include <QString>

#include "../SharedKernel/Systems/injector.h"
#include "../SharedKernel/Systems/modulerepository.h"
#include "../SharedKernel/Systems/process.h"
#include "../SharedKernel/Systems/processrepository.h"
#include "../SharedKernel/Controllers/malwarecontroller.h"
#include "../SharedKernel/Utilities/logging.h"

namespace Ui {
/**
 * @brief Auto-generated UI class by Qt Designer.
 */
class MainWindow;
}

/**
 * @brief The class that represents the user graphic interface.
 * @remarks The graphical components are defined in the .ui file.
 */
class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    /**
     * @brief Create a new instance of the class MainWindow.
     * @param parent The parent Qt object.
     */
    explicit MainWindow(QWidget *parent = 0);

    /**
     * @brief Destroys the instance of the class MainWindow.
     */
    ~MainWindow();

private slots:
    void on_injectInProcessButton_clicked();
    void on_processesCombo_currentIndexChanged(int selectedIndex);
    void on_processesCombo_opened();
    void on_startStopButton_clicked();
    void on_stateOfProcessButton_clicked();
    void writeLogging(QString message, utilities::LoggingType type);

private:
    const QString LibraryToInject = "MalwareEntryPoint.dll";
    void disableTitleBarOfDockPanels();
    void loadSystemDependantRepositories();
    void setupLogging();

    std::unique_ptr<systems::Injector> injector_;
    std::unique_ptr<systems::ModuleRepository> moduleRepo_;
    std::unique_ptr<systems::ProcessRepository> processRepo_;
    std::unique_ptr<systems::Process> selectedProcess_;
    controllers::MalwareController malwareController_;
    std::unique_ptr<Ui::MainWindow> ui_;

protected:
    void closeEvent(QCloseEvent *event) override;
};

#endif // MAINWINDOW_H
