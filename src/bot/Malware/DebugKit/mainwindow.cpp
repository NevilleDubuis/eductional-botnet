#include <functional>

#include <QScrollBar>
#include <QVariant>
#include <QTime>

#include "../SharedKernel/Systems/process.h"
#include "../SharedKernel/Utilities/logging.h"
#include "mainwindow.h"
#include "ui_mainwindow.h"

#ifdef Q_OS_WIN
    #include "../SharedKernel/Systems/Windows/windowsinjector.h"
    #include "../SharedKernel/Systems/Windows/windowsmodulerepository.h"
    #include "../SharedKernel/Systems/Windows/windowsprocessrepository.h"
#endif

using namespace utilities;

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui_(std::make_unique<Ui::MainWindow>()),
    selectedProcess_(nullptr)
{
    ui_->setupUi(this);
    utilities::Logging::subscribe([=](QString m) {this->writeLogging(m);});
    utilities::Logging::info("plop");

    loadSystemDependantRepositories();
    disableTitleBarOfDockPanels();
}

MainWindow::~MainWindow() {}

void MainWindow::on_injectInProcessButton_clicked()
{
    if(selectedProcess_ != nullptr)
    {
        injector_->injectInProcess(*selectedProcess_, "Injector.dll");
    }
}

void MainWindow::on_processesCombo_currentIndexChanged(int selectedIndex)
{
    if(selectedIndex >= 0)
    {
        systems::Process selectedProcess = processRepo_->getProcessById(ui_->processesCombo->itemData(selectedIndex).toInt());

        selectedProcess_ = std::make_unique<systems::Process>(selectedProcess);
    }
}

void MainWindow::on_processesCombo_opened()
{
    ui_->processesCombo->clear();

    std::vector<systems::Process> processes = processRepo_->getAllProcesses();

    for(size_t i = processes.size() - 1 ; i >= 0 ; i--)
    {
        ui_->processesCombo->addItem(processes[i].name() + " (" + QString::number(processes[i].id()) + ")", QVariant::fromValue(processes[i].id()));
    }
}

void MainWindow::on_stateOfProcessButton_clicked()
{
    if(selectedProcess_ != nullptr)
    {
        bool isInjected = false;
        Logging::info("Modules loaded in " + selectedProcess_->name());

        auto allModules = moduleRepo_->getAllModulesForProcess(*selectedProcess_);

        for(auto& module : allModules)
        {
            Logging::info("  -> " + module);

            isInjected |= module == "MalwareEntryPoint.dll";
        }

        Logging::info("The malware injection state is " + isInjected ? "INJECTED" : "NOT INJECTED");
    }
    else
    {
        Logging::info("No selected process.");
    }
}

void MainWindow::disableTitleBarOfDockPanels()
{
    QWidget* titleWidget = new QWidget(this);
    ui_->menuDock->setTitleBarWidget(titleWidget);
}

void MainWindow::loadSystemDependantRepositories()
{
#ifdef Q_OS_WIN
    injector_ = std::make_unique<systems::windows::WindowsInjector>();
    moduleRepo_ = std::make_unique<systems::windows::WindowsModuleRepository>();
    processRepo_ = std::make_unique<systems::windows::WindowsProcessRepository>();
#endif
}

void MainWindow::writeLogging(QString message)
{
    int currentScrollPosition = ui_->textLogging->verticalScrollBar()->value();
    bool isFullyScrolled = currentScrollPosition == ui_->textLogging->verticalScrollBar()->maximum();

    ui_->textLogging->setPlainText(ui_->textLogging->toPlainText() + "[" +QTime::currentTime().toString() + "] " + message + "\n");

    if(isFullyScrolled)
    {
        ui_->textLogging->verticalScrollBar()->setValue(ui_->textLogging->verticalScrollBar()->maximum());
    }
    else
    {
        ui_->textLogging->verticalScrollBar()->setValue(currentScrollPosition);
    }
}
