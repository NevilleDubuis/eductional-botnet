#include <functional>

#include <QScrollBar>
#include <QVariant>
#include <QTime>

#include "../SharedKernel/Controllers/attackcontroller.h"
#include "../SharedKernel/Systems/process.h"
#include "mainwindow.h"
#include "ui_mainwindow.h"

#ifdef Q_OS_WIN
    #include "../SharedKernel/Systems/Windows/windowsinjector.h"
    #include "../SharedKernel/Systems/Windows/windowsmodulerepository.h"
    #include "../SharedKernel/Systems/Windows/windowsprocessrepository.h"
#endif

using namespace utilities;

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui_(std::make_unique<Ui::MainWindow>()),
    selectedProcess_(nullptr)
{
    ui_->setupUi(this);

    setupLogging();
    loadSystemDependantRepositories();
    disableTitleBarOfDockPanels();
}

MainWindow::~MainWindow() {}

void MainWindow::on_injectInProcessButton_clicked()
{
    if(selectedProcess_ != nullptr)
    {
        injector_->injectInProcess(*selectedProcess_, LibraryToInject);
    }
}

void MainWindow::on_processesCombo_currentIndexChanged(int selectedIndex)
{
    if(selectedIndex >= 0)
    {
        systems::Process selectedProcess = processRepo_->getProcessById(ui_->processesCombo->itemData(selectedIndex).toInt());

        selectedProcess_ = std::make_unique<systems::Process>(selectedProcess);
    }
}

void MainWindow::on_processesCombo_opened()
{
    ui_->processesCombo->clear();

    std::vector<systems::Process> processes = processRepo_->getAllProcesses();

    for(int i = processes.size() - 1 ; i >= 0 ; i--)
    {
        ui_->processesCombo->addItem(processes[i].name() + " (" + QString::number(processes[i].id()) + ")", QVariant::fromValue(processes[i].id()));
    }
}

void MainWindow::on_startStopButton_clicked()
{
    if(malwareController_.isStarted())
    {
        // Stop the malware behavior
        malwareController_.stop();
        controllers::AttackController::get().stop();

        ui_->startStopButton->setText("Start");

        Logging::get().info("Malware thread stopped.");
    }
    else
    {
        malwareController_.start();

        ui_->startStopButton->setText("Stop");

        Logging::get().info("Malware thread started.");
    }
}

void MainWindow::on_stateOfProcessButton_clicked()
{
    if(selectedProcess_ != nullptr)
    {
        bool isInjected = false;
        Logging::get().info("Modules loaded in " + selectedProcess_->name());

        auto allModules = moduleRepo_->getAllModulesForProcess(*selectedProcess_);

        for(auto& module : allModules)
        {
            Logging::get().info("  -> " + module);

            isInjected |= module == LibraryToInject;
        }

        Logging::get().info("The malware injection state is " + (QString)(isInjected ? "INJECTED" : "NOT INJECTED"));
    }
    else
    {
        Logging::get().info("No selected process.");
    }
}

void MainWindow::disableTitleBarOfDockPanels()
{
    QWidget* titleWidget = new QWidget(this);
    ui_->menuDock->setTitleBarWidget(titleWidget);
}

void MainWindow::loadSystemDependantRepositories()
{
#ifdef Q_OS_WIN
    injector_ = std::make_unique<systems::windows::WindowsInjector>();
    moduleRepo_ = std::make_unique<systems::windows::WindowsModuleRepository>();
    processRepo_ = std::make_unique<systems::windows::WindowsProcessRepository>();
#endif
}

void MainWindow::writeLogging(QString message, LoggingType type)
{
    // Select the right text box to log depending on the type of the message
    QPlainTextEdit* textEdit = type == LoggingType::General ? ui_->textLogging : ui_->textNetwork;

    int currentScrollPosition = textEdit->verticalScrollBar()->value();
    bool isFullyScrolled = currentScrollPosition == textEdit->verticalScrollBar()->maximum();

    textEdit->setPlainText(textEdit->toPlainText() + "[" +QTime::currentTime().toString() + "] " + message + "\n");

    if(isFullyScrolled)
    {
        textEdit->verticalScrollBar()->setValue(textEdit->verticalScrollBar()->maximum());
    }
    else
    {
        textEdit->verticalScrollBar()->setValue(currentScrollPosition);
    }
}

void MainWindow::setupLogging()
{
    connect(&utilities::Logging::get(), SIGNAL(newMessage(QString,utilities::LoggingType)), this, SLOT(writeLogging(QString,utilities::LoggingType)));
    utilities::Logging::get().info("Malware Debug Kit started.");
}

void MainWindow::closeEvent(QCloseEvent*)
{
    malwareController_.stop();
}
