#ifndef MESSAGEPROCESSOR_H
#define MESSAGEPROCESSOR_H

#include <memory>

#include "../Network/serveradapter.h"
#include "../Network/Messages/Server/servermessage.h"
#include "messageprocessorbase.h"

namespace processors
{
    template<class TMessage>
    class MessageProcessor : public MessageProcessorBase
    {
    public:
        void process(std::shared_ptr<network::messages::server::ServerMessage> message, network::ServerAdapter& serverAdapter)
        {
            auto stronglyTypedMessage = std::dynamic_pointer_cast<TMessage> (message);

            if(stronglyTypedMessage)
            {
                process(stronglyTypedMessage, serverAdapter);
            }
        }

        virtual void process(std::shared_ptr<TMessage> message, network::ServerAdapter& serverAdapter) = 0;
    };
}

#endif // MESSAGEPROCESSOR_H
