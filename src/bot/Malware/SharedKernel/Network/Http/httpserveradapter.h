#ifndef HTTPSERVERADAPTER_H
#define HTTPSERVERADAPTER_H

#include <memory>
#include <functional>

#include <QJsonObject>
#include <QMap>
#include <QNetworkAccessManager>
#include <QNetworkReply>

#include "../Messages/Server/servermessage.h"
#include "../serveradapter.h"

namespace network { namespace http
{
    /**
     * @brief The implementation of the server adapter to communicate over a HTTP channel.
     */
    class HttpServerAdapter : public ServerAdapter
    {
        Q_OBJECT

    private:
        static QMap<ServerOpcode, std::function<std::shared_ptr<network::messages::server::ServerMessage>(QJsonObject&)>> serverMapper_;
        const QUrl apiUrl_ = "http://educational-botnet.herokuapp.com/api/bots";
        QNetworkAccessManager network_;

        std::unique_ptr<messages::server::ServerMessage> createMessageFromReply(QNetworkReply* reply);
        void handleError(QNetworkReply::NetworkError error);

    public:
        /**
         * @brief Creates a new instance of the class HttpServerAdapter.
         */
        HttpServerAdapter();

        /**
         * @brief Sends a given message to the server.
         * @param message The message to send.
         */
        void send(messages::client::ClientMessage& message) override;

    protected slots:
        /**
         * @brief The slot is triggered when a request finished to be sent with or without error to the server.
         * @param reply
         */
        virtual void onRequestFinished(QNetworkReply* reply);
    };
}}

#endif // HTTPSERVERADAPTER_H
