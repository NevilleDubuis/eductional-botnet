#include "clientmessage.h"

namespace network { namespace messages { namespace client
{
    // Initialize the static member
    QString ClientMessage::cachedLanMacAddress_;

    ClientMessage::ClientMessage(ClientOpcode opcode)
        : opcode_(opcode),
          macAddress_(getLanMacAddress())
    {
    }

    QJsonObject ClientMessage::toJson()
    {
        QJsonObject json;
        QJsonObject payload;

        payload["macAddress"] = macAddress_;

        json["opcode"] = (int)opcode_;
        json["payload"] = payload;

        return json;
    }

    QString ClientMessage::getLanMacAddress()
    {
        if(cachedLanMacAddress_ == QString::null)
        {
            foreach(QNetworkInterface interface, QNetworkInterface::allInterfaces())
            {
                if (interface.flags().testFlag(QNetworkInterface::IsUp)
                        && !interface.flags().testFlag(QNetworkInterface::IsLoopBack))
                {
                    foreach (QNetworkAddressEntry entry, interface.addressEntries())
                    {
                        if ( interface.hardwareAddress() != "00:00:00:00:00:00" &&
                             entry.ip().toString().contains(".") &&
                             !interface.humanReadableName().contains("VM", Qt::CaseInsensitive) &&
                             !interface.humanReadableName().contains("virtual", Qt::CaseInsensitive) &&
                             !interface.humanReadableName().contains("docker", Qt::CaseInsensitive))
                        {
                            cachedLanMacAddress_ = interface.hardwareAddress();
                        }

                    }
                }
            }
        }

        return cachedLanMacAddress_;
    }
}}}
