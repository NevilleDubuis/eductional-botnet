#include <QByteArray>

#include <windows.h>

#include "windowsinjector.h"

namespace systems { namespace windows
{
    void WindowsInjector::injectInProcess(systems::Process& process, QString libPath)
    {
        // Get a C string from QString
        QByteArray ba = libPath.toUtf8();
        char* libPathCharArray = ba.data();

        // Open the target process
        HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, process.id());

        // Get the address of the function LoadLibraryA
        LPVOID LoadLibraryAddr = (LPVOID)GetProcAddress(GetModuleHandle(L"kernel32.dll"), "LoadLibraryA");

        // Allocate a chunk of memory in the target process to store the path of the DLL
        LPVOID LLParam = (LPVOID)VirtualAllocEx(hProcess, NULL, strlen(libPathCharArray), MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);

        // Write the path of the DLL into the target process
        WriteProcessMemory(hProcess, LLParam, libPathCharArray, strlen(libPathCharArray), NULL);

        // Create a new thread to load the library into the target process
        HANDLE hThread = CreateRemoteThread(hProcess, NULL, NULL, (LPTHREAD_START_ROUTINE)LoadLibraryAddr, LLParam, NULL, NULL);

        // Wait that the remote thread finishes
        WaitForSingleObject(hThread, 2000);

        // Close the handle of the thread
        CloseHandle(hThread);

        // Release the memory previously allocated
        VirtualFreeEx(hProcess, LLParam, strlen(libPathCharArray), MEM_RELEASE);

        // Close the handle fo the process
        CloseHandle(hProcess);
    }
}}
