#include <windows.h>
#include <tlhelp32.h>
#include <tchar.h>

#include "windowsmodulerepository.h"

using namespace std;

namespace systems { namespace windows
{
    vector<QString> WindowsModuleRepository::getAllModulesForProcess(Process process)
    {
        vector<QString> modules;

        HANDLE hModuleSnap = INVALID_HANDLE_VALUE;
        MODULEENTRY32 me32;

        // Take a snapshot of all modules in the specified process.
        hModuleSnap = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, process.id());
        if( hModuleSnap == INVALID_HANDLE_VALUE )
        {
            return modules;
        }

        // Set the size of the structure before using it.
        me32.dwSize = sizeof( MODULEENTRY32 );

        // Retrieve information about the first module,
        // and exit if unsuccessful
        if( !Module32First( hModuleSnap, &me32 ) )
        {
            CloseHandle( hModuleSnap ); // clean the snapshot object
            return modules;
        }

        // Now walk the module list of the process,
        // and display information about each module
        do
        {
            modules.push_back(QString::fromStdWString(me32.szModule));

        } while( Module32Next( hModuleSnap, &me32 ) );

        CloseHandle( hModuleSnap );

        return modules;
    }
}}
