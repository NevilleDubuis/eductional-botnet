#include <QString>

#include <windows.h>
#include <tlhelp32.h>
#include <tchar.h>

#include "windowsprocessrepository.h"

using namespace std;

namespace systems { namespace windows
{
    WindowsProcessRepository::WindowsProcessRepository()
    {

    }

    vector<Process> WindowsProcessRepository::getAllProcesses()
    {
        HANDLE hProcessSnap;
        HANDLE hProcess;
        PROCESSENTRY32 pe32;
        DWORD dwPriorityClass;
        vector<Process> processes;

        // Take a snapshot of all processes in the system.
        hProcessSnap = CreateToolhelp32Snapshot( TH32CS_SNAPPROCESS, 0 );
        if( hProcessSnap == INVALID_HANDLE_VALUE )
        {
            return processes;
        }

        // Set the size of the structure before using it.
        pe32.dwSize = sizeof( PROCESSENTRY32 );

        // Retrieve information about the first process,
        // and exit if unsuccessful
        if( !Process32First( hProcessSnap, &pe32 ) )
        {
            CloseHandle( hProcessSnap ); // clean the snapshot object
            return processes;
        }

        // Now walk the snapshot of processes, and
        // display information about each process in turn
        do
        {
            // Retrieve the priority class.
            dwPriorityClass = 0;
            hProcess = OpenProcess( PROCESS_ALL_ACCESS, FALSE, pe32.th32ProcessID );

            if( hProcess == NULL )
            {
                continue;
            }
            else
            {
              dwPriorityClass = GetPriorityClass( hProcess );
              CloseHandle( hProcess );
            }

            // Capture the process into a domain object
            QString name = QString::fromWCharArray(pe32.szExeFile);
            processes.push_back(Process((int)pe32.th32ProcessID, name));

        } while( Process32Next( hProcessSnap, &pe32 ) );

        CloseHandle( hProcessSnap );

        return processes;
    }
}}
