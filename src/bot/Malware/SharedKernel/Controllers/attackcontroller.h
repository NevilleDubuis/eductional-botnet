#ifndef ATTACKCONTROLLER_H
#define ATTACKCONTROLLER_H

#include <functional>
#include <vector>

#include <QObject>
#include <QThread>
#include <QUrl>

#include "../Workers/attackworkerbase.h"

namespace controllers
{
    /**
     * @brief The controller that manages a single DOS attack.
     *
     * This controller manages the threads used to attack the target.
     */
    class AttackController : public QObject
    {
        Q_OBJECT

    public:
        /**
         * @brief The default instance of the controller.
         */
        static AttackController& get();

    private:
        const int NumberOfThreads = 200;
        bool isRunning_ = false;
        std::vector<QThread*> workerThreads_;

    signals:

    public slots:
        /**
         * @brief Starts an attack against a given target with a given method of attack.
         * @param url The URL of the target.
         * @param workerFactory A function pointer that initializes the method of attack.
         *
         * If an attack is already active, calling this method has no effect.
         */
        void start(QUrl url, std::function<workers::AttackWorkerBase*(QUrl)> workerFactory);

        /**
         * @brief Stops an active attack.
         *
         * If no attack is active, calling this method has no effect.
         */
        void stop();
    };
}

#endif // ATTACKCONTROLLER_H
