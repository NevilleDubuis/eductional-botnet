#include "../Utilities/logging.h"
#include "../Workers/httpattackworker.h"
#include "attackcontroller.h"

using namespace utilities;

namespace controllers
{
    AttackController &AttackController::get()
    {
        static AttackController controller;
        return controller;
    }

    void AttackController::start(QUrl url, std::function<workers::AttackWorkerBase*(QUrl)> workerFactory)
    {
        if(!isRunning_)
        {
            isRunning_ = true;
            workerThreads_.clear();

            Logging::get().info("Attack started on " + url.toString());

            for (int i = 0; i < NumberOfThreads; ++i) {
                auto thread = new QThread();
                auto worker = workerFactory(url);

                worker->moveToThread(thread);
                connect(thread, SIGNAL(finished()), worker, SLOT(deleteLater()));
                connect(thread, SIGNAL(started()), worker, SLOT(doWork()));

                workerThreads_.push_back(thread);
                thread->start(QThread::HighestPriority);
            }
        }
    }

    void AttackController::stop()
    {
        if(isRunning_)
        {
            Logging::get().info("Attack ended.");

            isRunning_ = false;
            for (int i = 0; i < NumberOfThreads; ++i) {
                QThread* thread = workerThreads_.at(i);
                thread->requestInterruption();
                thread->quit();
            }
        }
    }
}
